#!/usr/bin/env php
<?php
    class Colors {
		private $foreground_colors = array();
		private $background_colors = array();

		public function __construct() {
			// Set up shell colors
			$this->foreground_colors['black'] = '0;30';
			$this->foreground_colors['dark_gray'] = '1;30';
			$this->foreground_colors['blue'] = '0;34';
			$this->foreground_colors['light_blue'] = '1;34';
			$this->foreground_colors['green'] = '0;32';
			$this->foreground_colors['light_green'] = '1;32';
			$this->foreground_colors['cyan'] = '0;36';
			$this->foreground_colors['light_cyan'] = '1;36';
			$this->foreground_colors['red'] = '0;31';
			$this->foreground_colors['light_red'] = '1;31';
			$this->foreground_colors['purple'] = '0;35';
			$this->foreground_colors['light_purple'] = '1;35';
			$this->foreground_colors['brown'] = '0;33';
			$this->foreground_colors['yellow'] = '1;33';
			$this->foreground_colors['light_gray'] = '0;37';
			$this->foreground_colors['white'] = '1;37';

			$this->background_colors['black'] = '40';
			$this->background_colors['red'] = '41';
			$this->background_colors['green'] = '42';
			$this->background_colors['yellow'] = '43';
			$this->background_colors['blue'] = '44';
			$this->background_colors['magenta'] = '45';
			$this->background_colors['cyan'] = '46';
			$this->background_colors['light_gray'] = '47';
        }
        
        // Returns colored string
        public function getColoredString($string, $foreground_color = null, $background_color = null) {
            $colored_string = "";

            // Check if given foreground color found
            if (isset($this->foreground_colors[$foreground_color])) {
                $colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
            }
            // Check if given background color found
            if (isset($this->background_colors[$background_color])) {
                $colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
            }

            // Add string and end coloring
            $colored_string .=  $string . "\033[0m";

            return $colored_string;
        }
    }
    $colors = new Colors();
    $selected_option = $argv[1];

    if($argc==1){
        print_main_help();
    } else {
        if(starts_with($argv[1], "-")){
            if($argv[1]=="-h"){
                print_main_help();
            }
            elseif($argv[1]=="-v"){
                print_version();
            }
            else {
                print($colors->getColoredString("The argument ".$argv[1]." isn't valid", "red", "") . "\n");
            }
        } else {
            if($argv[1]=="make"){
                $option = isset($argv[2]) ? $argv[2] : ""; 
                make($option);
            }
        }
    }

    function make($option){
        global $colors, $argv;
        if($option!=""){
            switch ($option) {
                case 'controller':
                    $path = isset($argv[3]) ? $argv[3] : "";
                    make_controller($path);
                    break;
                default:
                   print($colors->getColoredString("The option $option is invalid", "red", "") . "\n");

                    break;
            }
        } else {
            print($colors->getColoredString("You must provide an option", "red", "") . "\n");
        }
    }
    function make_controller($path){
        global $colors;
        if($path!=""){
            if(starts_with($path, "-")){
                $argument = $path;
                if($argument=="-h") print_make_controller_help();
            }
            else {
                print($colors->getColoredString("You must provide a path", "red", "") . "\n");
            }
        }
    }

    function print_make_controller_help(){
        global $colors;
        print_header();

        print($colors->getColoredString("Use:", "green", "") . "\n");
        print("  php cloure ".
            $colors->getColoredString("make", "yellow")." ".
            $colors->getColoredString("controller", "cyan")." "
        );
        print("\n  The path could be a name or path");
        print("\n\n".$colors->getColoredString("Examples:", "green", "") . "\n");
        print("  php cloure ".
            $colors->getColoredString("make", "yellow")." ".
            $colors->getColoredString("controller", "cyan")." ".
            $colors->getColoredString("UsersController", "")."\n"
        );
        print("  php cloure ".
            $colors->getColoredString("make", "yellow")." ".
            $colors->getColoredString("controller", "cyan")." ".
            $colors->getColoredString("/MyFolder/MyFolder2/MyFolder-n/UsersController", "")."\n"
        );
    }

    /**
     * Print the header on CLI
     */
    function print_header(){
        global $colors;
        print($colors->getColoredString("Cloure framework", "yellow", ""));
        print($colors->getColoredString(" v1.0.1", "", ""));
        print("\n\n");
    }

    /**
     * Print version information
     */
    function print_version(){
        global $colors;
        print($colors->getColoredString("Cloure framework", "yellow", ""));
        print($colors->getColoredString(" v1.0.1", "", ""));
        print("\n\n");
    }

    function print_main_help(){
        global $colors, $commands;
        print_header();
        print($colors->getColoredString("Use:", "green", "") . "\n");
        print("type php cloure command [options] [arguments] to execute a command\n");
        print("type php cloure ".$colors->getColoredString("command", "yellow")." ".$colors->getColoredString("option", "cyan")." -h for help \n\n");
        print($colors->getColoredString("Available commands:", "green", "") . "\n");
        foreach ($commands as $command) {
            print($colors->getColoredString("  ".$command["name"], "yellow", "")."\n");
            $options = $command["options"];
            if(count($options)>0){
                print($colors->getColoredString("       Available options", "white", "")."\n");
                print($colors->getColoredString("       -----------------", "white", "")."\n");
            }
            foreach ($options as $option) {
                print($colors->getColoredString("       ".$option["name"], "cyan", "")."\n");
            }
        }
    }

    function starts_with($string, $search){
        $chars_count = strlen($search);
        if(substr($string, 0, $chars_count) === $search){
            return true;
        } else {
            return false;
        }
    }
?>